<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="ur_robot_gazebo">
  <!--
    This is a top-level xacro instantiating the Gazebo-specific version of the
    'ur_robot' macro (ie: 'ur_robot_gazebo') and passing it values for all its
    required arguments.

    This file should be considered the Gazebo-specific variant of the file
    with the same name in the ur_description package. It accepts the same
    arguments, but instead of configuring everything for a real robot, will
    generate a Gazebo-compatible URDF with a ros_control hardware_interface
    attached to it.

    Only use this top-level xacro if you plan on spawning the robot in Gazebo
    'by itself', without any gripper or any other geometry attached.

    If you need to attach an end-effector, camera or need to integrate the
    robot into a larger workcell and want to spawn that as a single entity in
    Gazebo, DO NOT EDIT THIS FILE.

    Instead: create a new top-level xacro, give it a proper name, include the
    required '.xacro' files, instantiate the models (ie: call the macros) and
    connect everything by adding the appropriate joints.
  -->

  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <xacro:include filename="$(find tracebot_mockup_gazebo)/urdf/ur_macro.xacro"/>
  <xacro:include filename="$(find tracebot_mockup_gazebo)/urdf/tracebot_mockup_macro.urdf.xacro"/>

  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface"/>
  <xacro:arg name="safety_limits" default="false"/>
  <xacro:arg name="safety_pos_margin" default="0.15"/>
  <xacro:arg name="safety_k_position" default="20"/>

  <xacro:tracebot_mockup_gazebo
    robot_mount_offset_x="$(arg robot_mount_offset_x)"
    robot_mount_offset_y="$(arg robot_mount_offset_y)"
    robot_mount_offset_z="$(arg robot_mount_offset_z)"
    robot_mount_offset_theta="$(arg robot_mount_offset_theta)"
    robot_mount_length="$(arg robot_mount_length)"
    robot_mount_width="$(arg robot_mount_width)"
    robot_mount_height="$(arg robot_mount_height)"
    robot_base_tilt="$(arg robot_base_tilt)"
    left_arm="$(arg left_arm)"
    right_arm="$(arg right_arm)"/>
  
  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
  <xacro:ur_robot_gazebo
    prefix="right_"
    joint_limits_parameters_file="$(find ur_description)/config/$(arg right_arm)/joint_limits.yaml"
    kinematics_parameters_file="$(find ur_description)/config/$(arg right_arm)/default_kinematics.yaml"
    physical_parameters_file="$(find ur_description)/config/$(arg right_arm)/physical_parameters.yaml"
    visual_parameters_file="$(find ur_description)/config/$(arg right_arm)/visual_parameters.yaml"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="false"
    safety_pos_margin="0.15"
    safety_k_position="20"
  />
  
  <xacro:ur_robot_gazebo
    prefix="left_"
    joint_limits_parameters_file="$(find ur_description)/config/$(arg right_arm)/joint_limits.yaml"
    kinematics_parameters_file="$(find ur_description)/config/$(arg right_arm)/default_kinematics.yaml"
    physical_parameters_file="$(find ur_description)/config/$(arg right_arm)/physical_parameters.yaml"
    visual_parameters_file="$(find ur_description)/config/$(arg right_arm)/visual_parameters.yaml"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="false"
    safety_pos_margin="0.15"
    safety_k_position="20"
  />

  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->
  <joint name="right_base_link_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="right_robot_mount"/>
    <child link="right_base_link"/>
  </joint>
  <joint name="left_base_link_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="left_robot_mount"/>
    <child link="left_base_link"/>
  </joint>
  <link name="world"/>
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>
  
    <gazebo>
      <plugin name="ros_control" filename="libgazebo_ros_control.so">
        <!--robotNamespace>/</robotNamespace-->
        <!--robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType-->
      </plugin>
    </gazebo>
  
</robot>
