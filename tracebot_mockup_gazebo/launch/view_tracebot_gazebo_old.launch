<?xml version="1.0"?>
<launch>
  <!--
    Main entry point for loading a single UR5e into Gazebo, in isolation, in the
    empty world.

    A set of ros_control controllers similar to those loaded by ur_robot_driver
    will be loaded by 'ur_control.launch.xml' (note: *similar*, *not* identical).

    This bringup .launch file is intentionally given the same name as the one in
    the ur_robot_driver package, as it fulfills a similar role: loading the
    configuration and starting the necessary ROS nodes which in the end provide
    a ROS API to a Universal Robots UR5e. Only in this case, instead of a real
    robot, a virtual model in Gazebo is used.

    NOTE 1: as this is not a real robot, there are limits to the faithfulness
    of the simulation. Dynamic behaviour will be different from a real robot.
    Only a subset of topics, actions and services is supported. Specifically,
    interaction with the Control Box itself is not supported, as Gazebo does not
    simulate a Control Box. This means: no Dashboard server, no URScript topic
    and no force-torque sensor among other things.

    NOTE 2: users wishing to integrate a UR5e with other models into a more
    complex simulation should NOT modify this file. Instead, if it would be
    desirable to reuse this file with a custom simulation, they should create a
    copy and update this copy so as to accomodate required changes.

    In those cases, treat this file as an example, showing one way how a Gazebo
    simulation for UR robots *could* be launched. It is not necessary to mimic
    this setup completely.
  -->

  <!--Robot description and related parameter files -->
  <!--Parameter files -->
  <arg name="joint_limit_params" default=""/>
  
  <arg name="robot_mount_offset_x" default="0.1293"/>
  <arg name="robot_mount_offset_y" default="0.0"/>
  <arg name="robot_mount_offset_z" default="0.0707"/>
  <arg name="robot_mount_offset_theta" default="0.0"/>
  
  <arg name="robot_mount_length" default="0.55"/>
  <arg name="robot_mount_width" default="0.55"/>
  <arg name="robot_mount_height" default="1.2664"/>
  <arg name="robot_base_tilt" default="0.785398"/>
  
  <arg name="left_arm" default="ur5e"/>
  <arg name="right_arm" default="ur5e"/>

  <param name="robot_description" command="$(find xacro)/xacro '$(find tracebot_mockup_gazebo)/urdf/tracebot_mockup.urdf.xacro'
    joint_limit_params:=$(arg joint_limit_params)
    robot_mount_offset_x:=$(arg robot_mount_offset_x)
    robot_mount_offset_y:=$(arg robot_mount_offset_y)
    robot_mount_offset_z:=$(arg robot_mount_offset_z)
    robot_mount_offset_theta:=$(arg robot_mount_offset_theta)
    robot_mount_length:=$(arg robot_mount_length)
    robot_mount_width:=$(arg robot_mount_width)
    robot_mount_height:=$(arg robot_mount_height)
    robot_base_tilt:=$(arg robot_base_tilt)
    left_arm:=$(arg left_arm)
    right_arm:=$(arg right_arm)"
    />

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find tracebot_mockup_gazebo)/config/tracebot_mockup_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="joint_group_pos_controller" doc="Controllers that are initally loaded, but not started."/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="500" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="paused" default="false" doc="Starts Gazebo in paused mode" />
  <arg name="gui" default="true" doc="Starts Gazebo gui" />


  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>

  <!-- Start the 'driver' (ie: Gazebo in this case) -->
  <include file="$(find ur_gazebo)/launch/inc/ur_control.launch.xml">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
  </include>
</launch>
